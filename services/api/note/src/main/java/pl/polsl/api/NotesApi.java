/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package pl.polsl.api;

import pl.polsl.model.Note;
import pl.polsl.model.NotesPaging;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "notes", description = "the notes API")
public interface NotesApi {

    NotesApiDelegate getDelegate();

    @ApiOperation(value = "Deletes a note", nickname = "deleteNote", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Note succesfully deleted."),
        @ApiResponse(code = 400, message = "Note couldn't have been deleted."),
        @ApiResponse(code = 500, message = "An unexpected error occured.", response = Object.class) })
    @RequestMapping(value = "/notes/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteNote(@ApiParam(value = "Id of note to delete",required=true) @PathVariable("id") String id) {
        return getDelegate().deleteNote(id);
    }


    @ApiOperation(value = "Gets notes", nickname = "getNotes", notes = "Return list of notes", response = NotesPaging.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of notes", response = NotesPaging.class),
        @ApiResponse(code = 500, message = "An unexpected error occured.", response = Object.class) })
    @RequestMapping(value = "/notes",
        method = RequestMethod.GET)
    default ResponseEntity<NotesPaging> getNotes(@ApiParam(value = "") @Valid @RequestParam(value = "username", required = false) String username,@ApiParam(value = "") @Valid @RequestParam(value = "householdId", required = false) String householdId,@ApiParam(value = "", allowableValues = "ASC, DESC") @Valid @RequestParam(value = "sortingDirection", required = false) String sortingDirection,@ApiParam(value = "") @Valid @RequestParam(value = "sortedField", required = false) String sortedField,@ApiParam(value = "") @Valid @RequestParam(value = "firstResult", required = false) Integer firstResult,@ApiParam(value = "") @Valid @RequestParam(value = "maxResults", required = false) Integer maxResults) {
        return getDelegate().getNotes(username, householdId, sortingDirection, sortedField, firstResult, maxResults);
    }


    @ApiOperation(value = "Creates a note or patches if it already exists", nickname = "saveNote", notes = "", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Note succesfully saved.", response = String.class),
        @ApiResponse(code = 400, message = "Note couldn't have been saved."),
        @ApiResponse(code = 500, message = "An unexpected error occured.", response = Object.class) })
    @RequestMapping(value = "/notes",
        method = RequestMethod.POST)
    default ResponseEntity<String> saveNote(@ApiParam(value = "Note to save"  )  @Valid @RequestBody Note note) {
        return getDelegate().saveNote(note);
    }

}
